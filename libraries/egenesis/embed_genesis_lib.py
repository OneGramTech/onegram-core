import hashlib
import re

GENESIS_FILE_BANNER = "" \
"""//                                   _           _    __ _ _        //
//                                  | |         | |  / _(_) |       //
//    __ _  ___ _ __   ___ _ __ __ _| |_ ___  __| | | |_ _| | ___   //
//   / _` |/ _ \\ '_ \\ / _ \\ '__/ _` | __/ _ \\/ _` | |  _| | |/ _ \\  //
//  | (_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | | | | |  __/  //
//   \\__, |\\___|_| |_|\\___|_|  \\__,_|\\__\\___|\\__,_| |_| |_|_|\\___|  //
//    __/ |                                                         //
//   |___/                                                          //
//                                                                  //
// Generated by:  libraries/chain_id/identify_chain.cpp             //
//                                                                  //
// Warning: This is a generated file, any changes made here will be //
// overwritten by the build process.  If you need to change what    //
// is generated here, you should use the CMake variable             //
// GRAPHENE_EGENESIS_JSON to specify an embedded genesis state.     //
//                                                                  //
"""

GENESIS_ARRAY_WIDTH = 40


def c_ify(byte_array):
    byte_data = bytearray()
    for b in byte_array:
        if b in b"\' !#$%&()*+,-./" or b in b":;<=>@[]^_`{|}~" or \
                b in range(ord("a"), ord("z") + 1) or b in range(ord("A"), ord("Z") + 1) or \
                b in range(ord("0"), ord("9") + 1):
            byte_data.append(b)
        elif b in b"\"":
            byte_data += b"\\\""
        elif b in b"?":
            # see https://en.cppreference.com/w/cpp/language/escape
            # and https://en.cppreference.com/w/cpp/language/operator_alternative
            byte_data += b"\\?"
        elif b in b"\\":
            byte_data += b"\\\\"
        elif b in b"\a":
            byte_data += b"\\a"
        elif b in b"\b":
            byte_data += b"\\b"
        elif b in b"\f":
            byte_data += b"\\f"
        elif b in b"\n":
            byte_data += b"\\n"
        elif b in b"\r":
            byte_data += b"\\r"
        elif b in b"\t":
            byte_data += b"\\t"
        elif b in b"\v":
            byte_data += b"\\v"
        else:
            byte_data += b"\\%o" % b

    return b"\"" + byte_data + b"\""


def convert_to_c_array(genesis_json):
    genesis_lines = b",\n".join([
        c_ify(genesis_json[i:i + GENESIS_ARRAY_WIDTH])
        for i in range(0, len(genesis_json), GENESIS_ARRAY_WIDTH)])

    return genesis_lines


def convert_to_c_array_parallel(genesis_json):
    from multiprocessing import Pool, cpu_count

    p = Pool(cpu_count())

    return b",\n".join(p.map(c_ify, (genesis_json[i:i + GENESIS_ARRAY_WIDTH]
                                     for i in range(0, len(genesis_json), GENESIS_ARRAY_WIDTH))))


def read_file_data(file_path):
    # 64KB cache performs way slower
    buf_size = 1048576

    sha256 = hashlib.sha256()

    file_contents = b""
    length = 0

    with open(file_path, "rb") as f:
        while True:
            data = f.read(buf_size)
            if not data:
                break

            length += len(data)
            file_contents += data
            sha256.update(data)

    return sha256.hexdigest(), length, file_contents


def replace_with_dictionary(match_object, dictionary):
    if match_object.group(1) in dictionary:
        return dictionary[match_object.group(1)]
    else:
        return match_object.group(0)
